swagger: "2.0"
info:
  description: "This is a simple API documentation for the Flask application using JWT and SQLite."
  version: "1.0.0"
  title: "Sample Flask API"
host: "localhost:5000"
basePath: "/"
schemes:
- "http"
paths:
  /login:
    post:
      summary: "Login"
      description: "Logs in a user with provided credentials."
      parameters:
      - in: "body"
        name: "credentials"
        required: true
        schema:
          type: "object"
          required:
          - username
          - password
          properties:
            username:
              type: "string"
            password:
              type: "string"
      responses:
        200:
          description: "User logged in successfully."
        401:
          description: "Invalid credentials."
  /:
    get:
      summary: "Home Page"
      description: "Returns a simple Hello World message."
      responses:
        200:
          description: "Successful retrieval of message."
          schema:
            type: "string"
  /users:
    get:
      summary: "Fetch Users"
      description: "Retrieves a list of users."
      responses:
        200:
          description: "List of users fetched successfully."
          schema:
            type: "array"
            items:
              $ref: '#/definitions/User'
    post:
      summary: "Create User"
      description: "Creates a new user with provided data."
      parameters:
      - in: "body"
        name: "user"
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: "User created successfully."
          schema:
            $ref: '#/definitions/User'
  /users/{id}:
    get:
      summary: "Fetch a User"
      description: "Retrieves a user by ID."
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        description: "ID of the user to fetch."
      responses:
        200:
          description: "User fetched successfully."
          schema:
            $ref: '#/definitions/User'
    put:
      summary: "Update User"
      description: "Updates an existing user with provided data."
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        description: "ID of the user to update."
      - in: "body"
        name: "user"
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: "User updated successfully."
          schema:
            $ref: '#/definitions/User'
    delete:
      summary: "Delete User"
      description: "Deletes a user by ID."
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        description: "ID of the user to delete."
      responses:
        200:
          description: "User deleted successfully."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
definitions:
  User:
    type: "object"
    required:
    - name
    - email
    - password
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
